#!/bin/bash
# PHP CodeSniffer pre-commit hook for git

TMP_STAGING=".tmp_staging"

# parse config file
CONFIG_FILE=$(dirname $0)/config
if [ -e $CONFIG_FILE ]; then
    . $CONFIG_FILE
fi

# simple check if code sniffer is set up correctly
if [ ! -x $PHPCS_BIN ]; then
    echo "PHP CodeSniffer bin not found or executable -> $PHPCS_BIN"
    exit 1
fi

if git rev-parse --verify HEAD
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# retrieve all files in staging area that are added, modified or renamed
# but no deletions etc
FILES=$(git diff-index --name-only --cached --diff-filter=ACMR $against -- )
if [ "$FILES" == "" ]; then
    exit 0
fi

# create temporary copy of staging area
if [ -e $TMP_STAGING ]; then
    rm -rf $TMP_STAGING
fi
mkdir $TMP_STAGING

# match files against whitelist
FILES_TO_CHECK=""
for FILE in $FILES
do
    echo "$FILE" | egrep -q "$PHPCS_FILE_PATTERN"
    RETVAL=$?
    if [ "$RETVAL" -eq "0" ]
    then
        FILES_TO_CHECK="$FILES_TO_CHECK $FILE"
    fi
done

if [ "$FILES_TO_CHECK" == "" ]; then
    exit 0
fi

# Check config settings and parse them into phpcs commands
if [ "$PHPCS_IGNORE" != "" ]; then
    IGNORE="--ignore=$PHPCS_IGNORE"
else
    IGNORE=""
fi

if [ "$PHPCS_ENCODING" != "" ]; then
    ENCODING="--encoding=$PHPCS_ENCODING"
else
    ENCODING=""
fi

if [ "$PHPCS_IGNORE_WARNINGS" == "1" ]; then
    IGNORE_WARNINGS="-n"
else
    IGNORE_WARNINGS=""
fi

# Copy contents of staged version of files to temporary staging area
# because we only want the staged version that will be commited and not
# the version in the working directory
STAGED_FILES=""
for FILE in $FILES_TO_CHECK
do
    ID=$(git diff-index --cached HEAD $FILE | cut -d " " -f4)

    # create staged version of file in temporary staging area with the same
    # path as the original file so that the phpcs ignore filters can be applied
    mkdir -p "$TMP_STAGING/$(dirname $FILE)"
    git cat-file blob $ID > "$TMP_STAGING/$FILE"
    STAGED_FILES="$STAGED_FILES $TMP_STAGING/$FILE"
done

# Check with PHP lint for syntax errors first
OUTPUT=$(php -l $STAGED_FILES) | grep -v 'No syntax errors detected'
RETVAL=$?

if [ "$OUTPUT" != "" ]; then
    echo "PHP Lint errors detected"
    echo "$OUTPUT"

    # delete temporary copy of staging area
    rm -rf $TMP_STAGING

    exit $RETVAL
fi

# Check with PHP CodeSniffer if PHP Lint detected no syntax errors
# CS_OUTPUT=$($PHPCS_BIN -s $IGNORE_WARNINGS  --tab-width=$PHPCS_TAB_WIDTH --standard=$PHPCS_CODING_STANDARD $ENCODING $IGNORE $STAGED_FILES)
CS_OUTPUT=$($PHPCS_BIN $IGNORE_WARNINGS  --tab-width=$PHPCS_TAB_WIDTH --standard=$PHPCS_CODING_STANDARD $ENCODING $IGNORE $STAGED_FILES)
CS_RETVAL=$?

# delete temporary copy of staging area
rm -rf $TMP_STAGING

if [ $CS_RETVAL -ne 0 ]; then
    echo "$CS_OUTPUT" | less
fi

# exit $CS_RETVAL
# Allow commit, just show psr msg
exit 0
